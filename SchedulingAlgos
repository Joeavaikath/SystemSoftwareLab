#include<stdio.h>
int wt[10],tat[10],bt[10];
double avgw=0,avgt=0;
void priorities(int P[10][5],int *N)
{
  int i,j;
  for(i=0;i<*N;i++)
        {
                int swaps=0;
                for(j=0;j<*N-i-1;j++)
                {
                        if(P[j][4]>P[j+1][4])
                        {
                                int t=P[j][0];
                                int t2=P[j][1];
                                int t3=P[j][4];
                                P[j][0]=P[j+1][0];
                                P[j][1]=P[j+1][1];
                                P[j][4]=P[j+1][4];
                                P[j+1][0]=t;
                                P[j+1][1]=t2;
                                P[j+1][4]=t3;
                                swaps++;
                        }
                }
                if (swaps==0)
                        break;
        }
        return;
}
void sjf(int P[10][5],int *N)
{
  int i,j;
  for(i=0;i<*N;i++)
        {
                int swaps=0;
                for(j=0;j<*N-i-1;j++)
                {
                        if(P[j][1]>P[j+1][1])
                        {
                                int t=P[j][0];
                                int t2=P[j][1];
                                P[j][0]=P[j+1][0];
                                P[j][1]=P[j+1][1];
                                P[j+1][0]=t;
                                P[j+1][1]=t2;
                                swaps++;
                        }
                }
                if (swaps==0)
                        break;
        }
        return;
}
void endpart(int P[10][5],int *N)
{
    int i,j;
  double aw=0,at=0;
   P[0][2]=0;
        P[0][3]=P[0][1];
        for(i=1;i<*N;i++)
        {
                P[i][2]=P[i-1][2]+P[i-1][1];
                P[i][3]=P[i][2]+P[i][1];
        }
        printf("\nDisplaying the processes: ");
        printf("\nProcess\t\tBurst Time\tWaiting Time\tTurnaround Time\n");
        for(i=0;i<*N;i++)
        {
        printf("\n%d\t\t%d\t\t%d\t\t%d\n",P[i][0],P[i][1],P[i][2],P[i][3]);
        aw+=P[i][2];
        at+=P[i][3];
        }
        printf("\nAverage waiting time is: %f",aw/(*N));
        printf("\nAverage turnaround time is: %f\n",at/(*N));
  
}
void insert(int P[][5],int *N)
{ int i;
  printf("\nEnter the burst times and priorities: ");
        for(i=0;i<*N;i++)
        {
                printf("\nProcess %d:",i+1);
                P[i][0]=i+1;
                scanf("%d",&P[i][1]);
                scanf("%d",&P[i][4]);
        }
}
void findwaitingtime()
{
  int processes[10],n,quantum;
  printf("Enter the number of processes and the time quantum");
  scanf("%d %d",&n,&quantum);
  for(int i=0;i<n;i++)
  {
    printf("Enter the burst times");
    processes[i]=i+1;
    scanf("%d",&bt[i]);
  }
    int rem_bt[n];
  for(int i=0;i<n;i++)
    rem_bt[i]=bt[i];
    
  int t=0;
  
  while(1)
  {
    int d=1;
    for(int i=0;i<n;i++)
    {
      if(rem_bt[i]>0)
      {
        d=0;
        if(rem_bt[i]>quantum)
        {t+=quantum;
          rem_bt[i]-=quantum;
        }
        else
        {
          t=t+rem_bt[i];
          wt[i]=t-bt[i];
          rem_bt[i]=0;
        }
      }
    }
    if(d==1)
    break;
  }
  for(int i=0;i<n;i++)
  {
    printf("\n%d\t%d\n",processes[i],wt[i]);
    avgw+=wt[i];
    
  }
  printf("\nAverage waiting time will be : %f",avgw/n);
  for (int i = 0; i < n ; i++)
        tat[i] = bt[i] + wt[i];
  for(int i=0;i<n;i++) 
  {
        printf("\n%d\t%d\n",processes[i],tat[i]);
        avgt+=tat[i];
  }
  printf("\nThe average turnaround time is: %f",avgt/n);;
}

void main()
{
        int c,i,j,swaps,N,q,A[10][5]={0};
        printf("Enter the number of processes: ");
        scanf("%d",&N);
        printf("Enter the choice: 1)FCFS 2)SJF 3)Priorities 4)Round-Robin");
        scanf("%d",&c);
        switch (c)
        {
          case 1:insert(&A,&N);
                  endpart(&A,&N);
                  break;
          case 2:printf("Running shortest-job-first: \n");
                 insert(&A,&N);
                 sjf(&A,&N);
                 endpart(&A,&N);
                 break;
          case 3:printf("Running priorities function: \n");
                 insert(&A,&N);
                 priorities(&A,&N);
                 endpart(&A,&N);
                 break;
          case 4:findwaitingtime();
                  break;
        }
       
}
